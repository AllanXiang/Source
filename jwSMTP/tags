!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR	jwsmtp/compat.h	/^  sockaddr_in ADDR; \/\/ we are wrapping this structure.$/;"	m	struct:jwsmtp::SOCKADDR_IN
Address	jwsmtp/mailer.h	/^   struct Address {$/;"	s	class:jwsmtp::mailer
B64_0	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_1	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_2	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_3	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_4	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_5	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_6	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_7	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_8	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_9	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
B64_A	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_B	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_C	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_D	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_E	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_F	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_G	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_H	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_I	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_J	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_K	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_L	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_M	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_N	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_O	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_P	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_Q	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_R	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_S	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_T	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_U	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_V	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_W	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_X	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_Y	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_Z	jwsmtp/base64.h	/^	B64_A, B64_B, B64_C, B64_D, B64_E, B64_F, B64_G, B64_H, B64_I, B64_J, B64_K, B64_L, B64_M, B64_N, B64_O, B64_P, B64_Q, B64_R, B64_S, B64_T, B64_U, B64_V, B64_W, B64_X, B64_Y, B64_Z,$/;"	e	enum:jwsmtp::BASE64
B64_a	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_b	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_c	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_d	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_e	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_f	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_g	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_h	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_i	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_j	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_k	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_l	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_m	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_n	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_o	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_p	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_q	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_r	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_s	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_t	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_u	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_v	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_w	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_x	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_y	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
B64_z	jwsmtp/base64.h	/^	B64_a, B64_b, B64_c, B64_d, B64_e, B64_f, B64_g, B64_h, B64_i, B64_j, B64_k, B64_l, B64_m, B64_n, B64_o, B64_p, B64_q, B64_r, B64_s, B64_t, B64_u, B64_v, B64_w, B64_x, B64_y, B64_z,$/;"	e	enum:jwsmtp::BASE64
BASE64	jwsmtp/base64.h	/^enum BASE64$/;"	g	namespace:jwsmtp
Bcc	jwsmtp/mailer.h	/^   const static enum {TO, Cc, Bcc, SMTP_PORT = 25, DNS_PORT = 53} consts;   $/;"	e	enum:jwsmtp::mailer::__anon1
Cc	jwsmtp/mailer.h	/^   const static enum {TO, Cc, Bcc, SMTP_PORT = 25, DNS_PORT = 53} consts;   $/;"	e	enum:jwsmtp::mailer::__anon1
Closesocket	jwsmtp/compat.cpp	/^void Closesocket(const SOCKET& s) {$/;"	f	namespace:jwsmtp
Connect	jwsmtp/compat.cpp	/^bool Connect(SOCKET sockfd, const SOCKADDR_IN& addr) {$/;"	f	namespace:jwsmtp
DNS_PORT	jwsmtp/mailer.h	/^   const static enum {TO, Cc, Bcc, SMTP_PORT = 25, DNS_PORT = 53} consts;   $/;"	e	enum:jwsmtp::mailer::__anon1
LOGIN	jwsmtp/mailer.h	/^   enum authtype {LOGIN = 1, PLAIN} type;$/;"	e	enum:jwsmtp::mailer::authtype
PLAIN	jwsmtp/mailer.h	/^   enum authtype {LOGIN = 1, PLAIN} type;$/;"	e	enum:jwsmtp::mailer::authtype
Recv	jwsmtp/compat.cpp	/^bool Recv(int &CharsRecv, SOCKET s, char *buf, size_t len, int flags) {$/;"	f	namespace:jwsmtp
SMTP_PORT	jwsmtp/mailer.h	/^   const static enum {TO, Cc, Bcc, SMTP_PORT = 25, DNS_PORT = 53} consts;   $/;"	e	enum:jwsmtp::mailer::__anon1
SOCKADDR_IN	jwsmtp/compat.h	/^  SOCKADDR_IN(const SOCKADDR_IN& addr) {$/;"	f	struct:jwsmtp::SOCKADDR_IN
SOCKADDR_IN	jwsmtp/compat.h	/^  SOCKADDR_IN(const std::string& address, unsigned short port, short family = AF_INET) {$/;"	f	struct:jwsmtp::SOCKADDR_IN
SOCKADDR_IN	jwsmtp/compat.h	/^struct SOCKADDR_IN {$/;"	s	namespace:jwsmtp
SOCKET	jwsmtp/compat.h	/^typedef int SOCKET; \/\/ get round windows definitions.$/;"	t
Send	jwsmtp/compat.cpp	/^bool Send(int &CharsSent, SOCKET s, const char *msg, size_t len, int flags) {$/;"	f	namespace:jwsmtp
Socket	jwsmtp/compat.cpp	/^bool Socket(SOCKET& s, int domain, int type, int protocol) {$/;"	f	namespace:jwsmtp
TO	jwsmtp/mailer.h	/^   const static enum {TO, Cc, Bcc, SMTP_PORT = 25, DNS_PORT = 53} consts;   $/;"	e	enum:jwsmtp::mailer::__anon1
Usage	demo2.cpp	/^void Usage() {$/;"	f
__BASE64_H__	jwsmtp/base64.h	28;"	d
__COMPAT_H__	jwsmtp/compat.h	26;"	d
__JWSMTP_H__	jwsmtp/jwsmtp.h	26;"	d
__MAILER_H__	jwsmtp/mailer.h	25;"	d
addrecipient	jwsmtp/mailer.cpp	/^bool mailer::addrecipient(const std::string& newrecipient, short recipient_type) {$/;"	f	class:jwsmtp::mailer
address	jwsmtp/mailer.h	/^      std::string address; \/\/ e.g.   someone@mail.com$/;"	m	struct:jwsmtp::mailer::Address
attach	jwsmtp/mailer.cpp	/^bool mailer::attach(const std::string& filename) {$/;"	f	class:jwsmtp::mailer
attachments	jwsmtp/mailer.h	/^   std::vector<std::pair<std::vector<char>, std::string> > attachments;$/;"	m	class:jwsmtp::mailer
auth	jwsmtp/mailer.h	/^   bool auth;$/;"	m	class:jwsmtp::mailer
authenticate	jwsmtp/mailer.cpp	/^bool mailer::authenticate(const std::string& servergreeting, const SOCKET& s) {$/;"	f	class:jwsmtp::mailer
authtype	jwsmtp/mailer.cpp	/^void mailer::authtype(const enum authtype Type) {$/;"	f	class:jwsmtp::mailer
authtype	jwsmtp/mailer.h	/^   enum authtype {LOGIN = 1, PLAIN} type;$/;"	g	class:jwsmtp::mailer
base64encode	jwsmtp/base64.cpp	/^std::string base64encode(const std::string& input, const bool returns) {$/;"	f	namespace:jwsmtp
base64encode	jwsmtp/base64.cpp	/^std::vector<char> base64encode(const std::vector<char>& input, const bool returns) {$/;"	f	namespace:jwsmtp
checkRFCcompat	jwsmtp/mailer.cpp	/^void mailer::checkRFCcompat() {$/;"	f	class:jwsmtp::mailer
clearattachments	jwsmtp/mailer.cpp	/^void mailer::clearattachments() {$/;"	f	class:jwsmtp::mailer
clearrecipients	jwsmtp/mailer.cpp	/^void mailer::clearrecipients() {$/;"	f	class:jwsmtp::mailer
consts	jwsmtp/mailer.h	/^   const static enum {TO, Cc, Bcc, SMTP_PORT = 25, DNS_PORT = 53} consts;   $/;"	m	class:jwsmtp::mailer	typeref:enum:jwsmtp::mailer::__anon1
dns	jwsmtp/test.cpp	/^   unsigned char dns[512] = {1,1,   1,0,      0,1,      0,0, 0,0, 0,0};$/;"	v
dnspos	jwsmtp/test.cpp	/^   int dnspos = 12; \/\/ end of dns header$/;"	v
fromAddress	jwsmtp/mailer.h	/^   Address fromAddress;$/;"	m	class:jwsmtp::mailer
get_sin_addr	jwsmtp/compat.h	/^  char* get_sin_addr() {$/;"	f	struct:jwsmtp::SOCKADDR_IN
get_size	jwsmtp/compat.h	/^  size_t get_size() const {return sizeof(ADDR);}$/;"	f	struct:jwsmtp::SOCKADDR_IN
getbase64character	jwsmtp/base64.cpp	/^char getbase64character(const char& in)$/;"	f	namespace:jwsmtp
gethostaddresses	jwsmtp/mailer.cpp	/^bool mailer::gethostaddresses(std::vector<SOCKADDR_IN>& adds) {$/;"	f	class:jwsmtp::mailer
getserveraddress	jwsmtp/mailer.cpp	/^std::string mailer::getserveraddress(const std::string& toaddress) const{$/;"	f	class:jwsmtp::mailer
initNetworking	jwsmtp/compat.cpp	/^void initNetworking() {$/;"	f	namespace:jwsmtp
jwsmtp	jwsmtp/base64.cpp	/^namespace jwsmtp {$/;"	n	file:
jwsmtp	jwsmtp/base64.h	/^namespace jwsmtp {$/;"	n
jwsmtp	jwsmtp/compat.cpp	/^namespace jwsmtp {$/;"	n	file:
jwsmtp	jwsmtp/compat.h	/^namespace jwsmtp {$/;"	n
jwsmtp	jwsmtp/mailer.cpp	/^namespace jwsmtp {$/;"	n	file:
jwsmtp	jwsmtp/mailer.h	/^namespace jwsmtp {$/;"	n
lookupMXRecord	jwsmtp/mailer.h	/^   const bool lookupMXRecord;$/;"	m	class:jwsmtp::mailer
mailer	jwsmtp/mailer.cpp	/^mailer::mailer(bool MXLookup, unsigned short Port):$/;"	f	class:jwsmtp::mailer
mailer	jwsmtp/mailer.cpp	/^mailer::mailer(const char* TOaddress, const char* FROMaddress,$/;"	f	class:jwsmtp::mailer
mailer	jwsmtp/mailer.h	/^class mailer$/;"	c	namespace:jwsmtp
main	demo1.cpp	/^int main(int argc, char* argv[])$/;"	f
main	demo2.cpp	/^int main(int argc, char* argv[])$/;"	f
makesmtpmessage	jwsmtp/mailer.cpp	/^std::vector<char> mailer::makesmtpmessage() const {$/;"	f	class:jwsmtp::mailer
message	jwsmtp/mailer.h	/^   std::vector<char> message;$/;"	m	class:jwsmtp::mailer
messageHTML	jwsmtp/mailer.h	/^   std::vector<char> messageHTML;$/;"	m	class:jwsmtp::mailer
name	jwsmtp/mailer.h	/^      std::string name;    \/\/ e.g.   freddy foobar$/;"	m	struct:jwsmtp::mailer::Address
nameserver	jwsmtp/mailer.h	/^   std::string nameserver;$/;"	m	class:jwsmtp::mailer
ok	jwsmtp/compat.h	/^  bool ok;$/;"	m	struct:jwsmtp::SOCKADDR_IN
operator ()	jwsmtp/mailer.cpp	/^void mailer::operator()() {$/;"	f	class:jwsmtp::mailer
operator =	jwsmtp/compat.h	/^  SOCKADDR_IN operator = (const SOCKADDR_IN& addr) {$/;"	f	struct:jwsmtp::SOCKADDR_IN
operator bool	jwsmtp/compat.h	/^  operator bool() const {return ok;}$/;"	f	struct:jwsmtp::SOCKADDR_IN
operator const sockaddr	jwsmtp/compat.h	/^  operator const sockaddr () const {$/;"	f	struct:jwsmtp::SOCKADDR_IN
operator const sockaddr_in	jwsmtp/compat.h	/^  operator const sockaddr_in () const {$/;"	f	struct:jwsmtp::SOCKADDR_IN
padding	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
parseRR	jwsmtp/mailer.cpp	/^bool mailer::parseRR(int& pos, const unsigned char dns[], std::string& name, in_addr& address) {$/;"	f	class:jwsmtp::mailer
parseaddress	jwsmtp/mailer.cpp	/^mailer::Address mailer::parseaddress(const std::string& addresstoparse) {$/;"	f	class:jwsmtp::mailer
parsename	jwsmtp/mailer.cpp	/^void mailer::parsename(int& pos, const unsigned char dns[], std::string& name) {$/;"	f	class:jwsmtp::mailer
pass	jwsmtp/mailer.h	/^   std::string pass;$/;"	m	class:jwsmtp::mailer
password	jwsmtp/mailer.cpp	/^void mailer::password(const std::string& Pass) {$/;"	f	class:jwsmtp::mailer
plus	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
port	jwsmtp/mailer.h	/^   const unsigned short port;$/;"	m	class:jwsmtp::mailer
recipient_const_iter	jwsmtp/mailer.h	/^   typedef std::vector<std::pair<Address, short> >::const_iterator recipient_const_iter;$/;"	t	class:jwsmtp::mailer
recipient_iter	jwsmtp/mailer.h	/^   typedef std::vector<std::pair<Address, short> >::iterator recipient_iter;$/;"	t	class:jwsmtp::mailer
recipients	jwsmtp/mailer.h	/^   std::vector<std::pair<Address, short> > recipients;$/;"	m	class:jwsmtp::mailer
removeattachment	jwsmtp/mailer.cpp	/^bool mailer::removeattachment(const std::string& filename) {$/;"	f	class:jwsmtp::mailer
removerecipient	jwsmtp/mailer.cpp	/^bool mailer::removerecipient(const std::string& recipient) {$/;"	f	class:jwsmtp::mailer
reset	jwsmtp/mailer.cpp	/^void mailer::reset() {$/;"	f	class:jwsmtp::mailer
response	jwsmtp/mailer.cpp	/^const std::string& mailer::response() const {$/;"	f	class:jwsmtp::mailer
returnstring	jwsmtp/mailer.h	/^   std::string returnstring;$/;"	m	class:jwsmtp::mailer
send	jwsmtp/mailer.cpp	/^void mailer::send() {$/;"	f	class:jwsmtp::mailer
server	jwsmtp/mailer.h	/^   std::string server;$/;"	m	class:jwsmtp::mailer
set_ip	jwsmtp/compat.h	/^  void set_ip(const std::string& newip) {$/;"	f	struct:jwsmtp::SOCKADDR_IN
set_port	jwsmtp/compat.h	/^  void set_port(unsigned short newport) {ADDR.sin_port = newport;}$/;"	f	struct:jwsmtp::SOCKADDR_IN
setmessage	jwsmtp/mailer.cpp	/^bool mailer::setmessage(const std::string& newmessage) {$/;"	f	class:jwsmtp::mailer
setmessage	jwsmtp/mailer.cpp	/^bool mailer::setmessage(const std::vector<char>& newmessage) {$/;"	f	class:jwsmtp::mailer
setmessageHTML	jwsmtp/mailer.cpp	/^bool mailer::setmessageHTML(const std::string& newmessage) {$/;"	f	class:jwsmtp::mailer
setmessageHTML	jwsmtp/mailer.cpp	/^bool mailer::setmessageHTML(const std::vector<char>& newmessage) {$/;"	f	class:jwsmtp::mailer
setmessageHTMLfile	jwsmtp/mailer.cpp	/^bool mailer::setmessageHTMLfile(const std::string& filename) {$/;"	f	class:jwsmtp::mailer
setsender	jwsmtp/mailer.cpp	/^bool mailer::setsender(const std::string& newsender) {$/;"	f	class:jwsmtp::mailer
setserver	jwsmtp/mailer.cpp	/^bool mailer::setserver(const std::string& nameserver_or_smtpserver) {$/;"	f	class:jwsmtp::mailer
setsubject	jwsmtp/mailer.cpp	/^bool mailer::setsubject(const std::string& newSubject) {$/;"	f	class:jwsmtp::mailer
slash	jwsmtp/base64.h	/^	B64_0, B64_1, B64_2, B64_3, B64_4, B64_5, B64_6, B64_7, B64_8, B64_9, plus, slash, padding$/;"	e	enum:jwsmtp::BASE64
subject	jwsmtp/mailer.h	/^   std::string subject;$/;"	m	class:jwsmtp::mailer
type	jwsmtp/mailer.h	/^   enum authtype {LOGIN = 1, PLAIN} type;$/;"	m	class:jwsmtp::mailer	typeref:enum:jwsmtp::mailer::authtype
user	jwsmtp/mailer.h	/^   std::string user;$/;"	m	class:jwsmtp::mailer
username	jwsmtp/mailer.cpp	/^void mailer::username(const std::string& User) {$/;"	f	class:jwsmtp::mailer
vec_pair_char_str_const_iter	jwsmtp/mailer.h	/^   typedef std::vector<std::pair<std::vector<char>, std::string> >::const_iterator vec_pair_char_str_const_iter;$/;"	t	class:jwsmtp::mailer
vec_str_const_iter	jwsmtp/mailer.h	/^   typedef std::vector<std::string>::const_iterator vec_str_const_iter;$/;"	t	class:jwsmtp::mailer
zeroaddress	jwsmtp/compat.h	/^  void zeroaddress() {$/;"	f	struct:jwsmtp::SOCKADDR_IN
~mailer	jwsmtp/mailer.cpp	/^mailer::~mailer() { }$/;"	f	class:jwsmtp::mailer
